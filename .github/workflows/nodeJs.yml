name: Node.js CI for Custom Path

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up the correct version of Node.js and npm
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '15.x'  # Set the correct Node.js version (>= 15.0.0 < 16.0.0)
        check-latest: true

    # Upgrade npm to the required version
    - name: Upgrade npm to 7.x
      run: npm install -g npm@7

    # Cache Node.js modules with the correct path to package-lock.json
    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: codebase/rdicidr-0.1.0/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('codebase/rdicidr-0.1.0/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Install dependencies from the codebase/rdicidr-0.1.0 directory
    - name: Install dependencies
      run: |
        cd codebase/rdicidr-0.1.0
        npm install

    # Run linter (ESLint)
    - name: Run linter (ESLint)
      run: |
        cd codebase/rdicidr-0.1.0
        npm run lint

    # Run Prettier (Ensure Prettier is installed)
    - name: Run formatter (Prettier)
      run: |
        cd codebase/rdicidr-0.1.0
        npm run prettier

    # Run tests (Jest)
    - name: Run tests (Jest)
      env:
        CI: true
      run: |
        cd codebase/rdicidr-0.1.0
        npm run test

    # Build the project
    - name: Build the project
      run: |
        cd codebase/rdicidr-0.1.0
        npm run build
   # Debugging step to list files in the current directory
    - name: List files in the current directory
      run: ls -la

    # Debugging step to list files in the build directory
    - name: List files in the build directory
      run: ls -la ./codebase/rdicidr-0.1.0/build        
    # Upload the build directory (e.g., dist or build) as an artifact
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: ./codebase/rdicidr-0.1.0/build   # Adjust this path to the correct build output folder (e.g., dist or build) 

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Download the uploaded artifact
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: build-artifact
        path: ./build  # Download to a local `build` folder

    # Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init
    # Taint all S3 Objects to force re-upload
    - name: Taint all S3 Objects
      run: |
        for file in $(terraform state list | grep 'aws_s3_bucket_object.build_files'); do
          terraform taint "$file"
        done
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      

    # Apply Terraform to upload the build folder to the existing S3 bucket
    - name: Deploy to S3
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}        
